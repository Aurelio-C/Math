import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

st.set_page_config(page_title="Derivada Num√©rica", layout="centered")
# Define o t√≠tulo da aplica√ß√£o na aba do navegador e centraliza o layout da p√°gina

st.title("üî¢ Calculadora de Derivada Num√©rica")
# Exibe o t√≠tulo principal na p√°gina Streamlit

st.markdown("Escolha a fun√ß√£o, m√©todo, ponto de c√°lculo e veja gr√°ficos!")
# Texto explicativo para o usu√°rio sobre o que a aplica√ß√£o faz

# Fun√ß√£o para calcular a derivada num√©rica pela diferen√ßa central
def derivada_central(func, x, h=1e-7):
    """
    Calcula a derivada num√©rica de uma fun√ß√£o usando o m√©todo da diferen√ßa central.

    Par√¢metros:
    func : a fun√ß√£o matem√°tica a ser diferenciada
    x : float, o ponto onde a derivada ser√° calculada
    h : float, passo pequeno para aproxima√ß√£o (padr√£o = 10^-7)

    Retorna:
    float : valor aproximado da derivada de func em x
    """
    return (func(x + h) - func(x - h)) / (2 * h)

# Bloco de formul√°rio para entrada de dados pelo usu√°rio
with st.form("formulario_calculo"):
    st.markdown("Exemplo: `np.sin(x)*x**2` ou `np.exp(x) / (x**2+2)`")
    # Mostra exemplos de fun√ß√µes que podem ser digitadas pelo usu√°rio

    str_funcao = st.text_input("Digite a fun√ß√£o f(x):", value="np.sin(x)*x**2")
    # Campo para o usu√°rio digitar a fun√ß√£o em nota√ß√£o Python, usando biblioteca numpy

    ponto_x = st.number_input("Calcular a derivada no ponto x =", value=1.0, step=0.1, format="%.2f")
    # Campo para o usu√°rio digitar o ponto x onde quer calcular a derivada, com valor padr√£o 1.0

    mostra_grafico = st.checkbox("Mostrar gr√°fico local da fun√ß√£o e derivada")
    # Checkbox para o usu√°rio optar por visualizar o gr√°fico da fun√ß√£o e sua derivada

    submitted = st.form_submit_button("Calcular Derivada")
    # Bot√£o para submeter o formul√°rio e iniciar o c√°lculo

# Ap√≥s submiss√£o do formul√°rio
if submitted:
    try:
        # Cria a fun√ß√£o matem√°tica a partir da string digitada pelo usu√°rio
        funcao_criada = lambda x: eval(str_funcao, {"np": np, "__builtins__": {}}, {"x": x})
        funcao_criada(ponto_x)  # Testa se a fun√ß√£o pode ser avaliada no ponto x

        # Calcula a derivada num√©rica usando a fun√ß√£o derivada_central
        resultado = derivada_central(funcao_criada, ponto_x, h=1e-7)
        st.success("C√°lculo realizado!")
        # Mostra o resultado da derivada no ponto x com 6 casas decimais
        st.metric(label=f"Derivada f'({ponto_x})", value=f"{resultado:.6f}")

        # Se o usu√°rio quer ver o gr√°fico, gera e exibe o gr√°fico da fun√ß√£o e derivada localmente
        if mostra_grafico:
            xs = np.linspace(ponto_x - 2, ponto_x + 2, 200)  # valores x ao redor do ponto
            ys = [funcao_criada(x) for x in xs]  # valores da fun√ß√£o f(x)
            dys = [derivada_central(funcao_criada, x, h=1e-7) for x in xs]  # valores da derivada f'(x)
            fig, ax = plt.subplots()
            ax.plot(xs, ys, label="f(x)")
            ax.plot(xs, dys, label="f'(x)")
            ax.axvline(ponto_x, color='gray', linestyle='--')  # linha vertical no ponto de c√°lculo
            ax.legend()
            st.pyplot(fig)

    except Exception as e:
        # Tratamento de erro para entrada inv√°lida ou c√°lculo inv√°lido
        st.error(f"Erro ao processar a fun√ß√£o: {e}")
        st.error("Exemplo v√°lido: `np.sin(x)*x**2`.")
